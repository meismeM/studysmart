// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Generates study questions (multiple-choice, short answer, and fill-in-the-blank) for a given chapter of a textbook.
 *
 * - generateStudyQuestions - A function that generates study questions based on the chapter content and question type.
 * - GenerateStudyQuestionsInput - The input type for the generateStudyQuestions function.
 * - GenerateStudyQuestionsOutput - The return type for the generateStudyQuestions function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const GenerateStudyQuestionsInputSchema = z.object({
  chapterContent: z.string().describe('The content of the textbook chapter.'),
  questionType: z
    .enum(['multiple-choice', 'short-answer', 'fill-in-the-blank'])
    .describe('The type of study questions to generate.'),
  numberOfQuestions: z.number().int().positive().default(5).describe('The number of questions to generate (default is 5).'),
});
export type GenerateStudyQuestionsInput = z.infer<
  typeof GenerateStudyQuestionsInputSchema
>;

const GenerateStudyQuestionsOutputSchema = z.object({
  questions: z.array(z.string()).describe('An array of generated study questions.'),
});
export type GenerateStudyQuestionsOutput = z.infer<
  typeof GenerateStudyQuestionsOutputSchema
>;

export async function generateStudyQuestions(
  input: GenerateStudyQuestionsInput
): Promise<GenerateStudyQuestionsOutput> {
  return generateStudyQuestionsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateStudyQuestionsPrompt',
  input: {
    schema: z.object({
      chapterContent: z.string().describe('The content of the textbook chapter.'),
      questionType:
        z.enum(['multiple-choice', 'short-answer', 'fill-in-the-blank'])
          .describe('The type of study questions to generate.'),
      numberOfQuestions: z.number().int().positive()
        .default(5)
        .describe('The number of questions to generate (default is 5).'),
    }),
  },
  output: {
    schema: z.object({
      questions: z
        .array(z.string())
        .describe('An array of generated study questions.'),
    }),
  },
  prompt: `You are an expert educator creating study questions for students.

  Based on the provided chapter content, generate {{{numberOfQuestions}}} {{{questionType}}} questions to help students test their understanding of the material.

  Chapter Content: {{{chapterContent}}}

  The questions should be clear, concise, and directly related to the chapter content.

  Output the questions in the following JSON format:
  {
    "questions": ["question 1", "question 2", ...]
  }`,
});

const generateStudyQuestionsFlow = ai.defineFlow<
  typeof GenerateStudyQuestionsInputSchema,
  typeof GenerateStudyQuestionsOutputSchema
>(
  {
    name: 'generateStudyQuestionsFlow',
    inputSchema: GenerateStudyQuestionsInputSchema,
    outputSchema: GenerateStudyQuestionsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
